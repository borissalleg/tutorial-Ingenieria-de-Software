{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#ingenieria-de-software","title":"INGENIERIA DE SOFTWARE","text":"<p>La ingenier\u00eda de software es una disciplina de la inform\u00e1tica que se encarga del estudio, dise\u00f1o, desarrollo, implementaci\u00f3n, prueba y mantenimiento de sistemas de software mediante m\u00e9todos sistem\u00e1ticos, t\u00e9cnicos y cient\u00edficos. Su objetivo principal es crear soluciones digitales que sean funcionales, eficientes, seguras y adaptables a las necesidades de los usuarios y organizaciones. Esta \u00e1rea combina principios de la programaci\u00f3n, la gesti\u00f3n de proyectos, el dise\u00f1o de sistemas y la calidad del software, promoviendo buenas pr\u00e1cticas que permiten construir productos tecnol\u00f3gicos confiables y sostenibles en el tiempo.</p> <p>En este tutorial se brinda orientaci\u00f3n para que aprendas siguiendo semana a semana </p>"},{"location":"semana2/contenidosemana2/","title":"Temas de la Semana 2","text":""},{"location":"semana2/contenidosemana2/#1-elementos-del-diseno-de-software","title":"1. Elementos del dise\u00f1o de software","text":"<ul> <li>Objetivos</li> <li>Restricciones</li> <li>Alternativas</li> <li>Representaciones y soluciones.</li> </ul>"},{"location":"semana2/contenidosemana2/#2-el-diseno-preliminar-y-el-diseno-detallado","title":"2. El dise\u00f1o preliminar y el dise\u00f1o detallado","text":""},{"location":"semana2/contenidosemana2/#3-transicion-del-analisis-al-diseno","title":"3. Transici\u00f3n del an\u00e1lisis al dise\u00f1o","text":"<ul> <li>interpretaci\u00f3n de la documentaci\u00f3n del an\u00e1lisis y evoluci\u00f3n del dise\u00f1o preliminar al dise\u00f1o detallado.</li> </ul>"},{"location":"semana2/contenidosemana2/#4-el-diagrama-de-objetivos","title":"4. El diagrama de objetivos","text":""},{"location":"semana2/contenidosemana2/#objetivo-de-aprendizaje","title":"Objetivo de aprendizaje","text":"<p>Que los estudiantes conozcan las distintas fases del ciclo de vida de la ingenier\u00eda de software, con \u00e9nfasis en los elementos y etapas del dise\u00f1o.</p>"},{"location":"semana2/dise%C3%B1opreliminarydetallado/","title":"El dise\u00f1o Preliminar y el dise\u00f1o detallado","text":""},{"location":"semana2/dise%C3%B1opreliminarydetallado/#diseno-preliminar-y-diseno-detallado-en-la-ingenieria-de-software","title":"Dise\u00f1o Preliminar y Dise\u00f1o Detallado en la Ingenier\u00eda de Software","text":"<p>El dise\u00f1o de software es una fase cr\u00edtica del ciclo de vida del desarrollo, en la que se transforman los requisitos del sistema (obtenidos en el an\u00e1lisis) en una estructura t\u00e9cnica que guiar\u00e1 la implementaci\u00f3n. Este proceso se divide en dos etapas principales: dise\u00f1o preliminar y dise\u00f1o detallado, cada una con objetivos, alcance y productos espec\u00edficos.</p>"},{"location":"semana2/dise%C3%B1opreliminarydetallado/#1-diseno-preliminar-tambien-llamado-diseno-arquitectonico-o-de-alto-nivel","title":"1. Dise\u00f1o Preliminar (Tambi\u00e9n llamado Dise\u00f1o Arquitect\u00f3nico o de Alto Nivel)","text":""},{"location":"semana2/dise%C3%B1opreliminarydetallado/#que-es","title":"\u00bfQu\u00e9 es?","text":"<p>El dise\u00f1o preliminar es la primera aproximaci\u00f3n estructural al sistema. Consiste en definir la arquitectura general, descomponiendo el sistema en m\u00f3dulos o componentes principales y estableciendo c\u00f3mo se relacionan entre s\u00ed.</p>"},{"location":"semana2/dise%C3%B1opreliminarydetallado/#objetivos-del-diseno-preliminar","title":"Objetivos del dise\u00f1o preliminar","text":"<ul> <li>Establecer la estructura general del sistema.</li> <li>Identificar los m\u00f3dulos principales (subsistemas).</li> <li>Definir las interacciones entre m\u00f3dulos (interfaces, flujos de datos).</li> <li>Seleccionar el estilo arquitect\u00f3nico (por ejemplo: capas, cliente-servidor, microservicios).</li> <li>Garantizar que el dise\u00f1o cumpla con los atributos de calidad (seguridad, escalabilidad, mantenibilidad).</li> </ul> Actividades clave <ul> <li>Descomposici\u00f3n del sistema en componentes.</li> <li>Definici\u00f3n de interfaces entre m\u00f3dulos.</li> <li>Selecci\u00f3n de tecnolog\u00edas y plataformas (por ejemplo: usar Spring Boot, PostgreSQL, AWS).</li> <li>Toma de decisiones arquitect\u00f3nicas (monol\u00edtico vs. distribuido, sincr\u00f3nico vs. as\u00edncrono).</li> <li>Elaboraci\u00f3n de diagramas de arquitectura (vistas l\u00f3gica, de despliegue, de componentes).</li> </ul>"},{"location":"semana2/dise%C3%B1opreliminarydetallado/#productos-o-entregables","title":"Productos o entregables","text":"<ul> <li>Diagrama de arquitectura del sistema.</li> <li>Especificaci\u00f3n de m\u00f3dulos y sus responsabilidades.</li> <li>Documento de decisiones arquitect\u00f3nicas (ADRs).</li> <li>Diagrama de despliegue (hardware y software involucrado).</li> <li>Vista l\u00f3gica del sistema (qu\u00e9 hace cada componente).</li> </ul> Ejemplo pr\u00e1ctico (para clase) <p>Para un sistema de gesti\u00f3n de biblioteca: </p> <ul> <li>M\u00f3dulos: Pr\u00e9stamos, Usuarios, Cat\u00e1logo, Devoluciones.</li> <li>Arquitectura en capas: Presentaci\u00f3n, L\u00f3gica de Negocio, Datos.</li> <li>Tecnolog\u00edas: Frontend con React, Backend con Node.js, base de datos MySQL.</li> <li>Interfaz: API REST entre frontend y backend.</li> </ul> <p>Enfoque pedag\u00f3gico: Usa Lucidchart o Draw.io para modelar la arquitectura. Pide a los estudiantes que propongan al menos dos alternativas de arquitectura (ej: monol\u00edtica vs. microservicios) y justifiquen su elecci\u00f3n.</p>"},{"location":"semana2/dise%C3%B1opreliminarydetallado/#2-diseno-detallado-tambien-llamado-diseno-de-bajo-nivel","title":"2. Dise\u00f1o Detallado (Tambi\u00e9n llamado Dise\u00f1o de Bajo Nivel)","text":""},{"location":"semana2/dise%C3%B1opreliminarydetallado/#que-es_1","title":"\u00bfQu\u00e9 es?","text":"<p>El dise\u00f1o detallado profundiza en cada uno de los m\u00f3dulos definidos en el dise\u00f1o preliminar. Aqu\u00ed se especifica c\u00f3mo funciona cada componente internamente, incluyendo estructuras de datos, algoritmos, clases, bases de datos y procesos.</p>"},{"location":"semana2/dise%C3%B1opreliminarydetallado/#objetivos-del-diseno-detallado","title":"Objetivos del dise\u00f1o detallado:","text":"<ul> <li>Especificar el funcionamiento interno de cada m\u00f3dulo.</li> <li>Definir estructuras de datos (tablas, diccionario de datos).</li> <li>Detallar clases, m\u00e9todos, atributos (en entornos orientados a objetos).</li> <li>Dise\u00f1ar la interfaz de usuario (pantallas, formatos de entrada/salida).</li> <li>Especificar procesos y flujos de control (diagramas de secuencia, actividad).</li> <li>Preparar todo para que los desarrolladores puedan codificar sin ambig\u00fcedades.</li> </ul> Actividades clave <ul> <li>Dise\u00f1o de bases de datos (modelo entidad-relaci\u00f3n, normalizaci\u00f3n).</li> <li>Creaci\u00f3n de diagramas UML (clases, secuencia, estados, componentes).</li> <li>Dise\u00f1o de interfaces de usuario (mockups, prototipos).</li> <li>Especificaci\u00f3n de algoritmos y reglas de negocio.</li> <li>Definici\u00f3n de diccionario de datos (campos, tipos, restricciones).</li> <li>Detalle de APIs (endpoints, par\u00e1metros, respuestas).</li> </ul>"},{"location":"semana2/dise%C3%B1opreliminarydetallado/#productos-o-entregables_1","title":"Productos o entregables:","text":"<ul> <li>Diagrama de clases.</li> <li>Diagrama de secuencia (ej: flujo de \"realizar pr\u00e9stamo\").</li> <li>Modelo de datos (entidad-relaci\u00f3n).</li> <li>Diccionario de datos.</li> <li>Prototipos de interfaces (hechos en Figma u otra herramienta).</li> <li>Especificaciones t\u00e9cnicas por m\u00f3dulo.</li> </ul> Ejemplo pr\u00e1ctico (para clase) <p>M\u00f3dulo \"Pr\u00e9stamos\":</p> <ul> <li> <p>Clase Prestamo: atributos (id, fecha, usuario, libro, fecha_devoluci\u00f3n).</p> <ul> <li>M\u00e9todo validarDisponibilidad(), calcularMulta().</li> </ul> </li> <li> <p>Tabla en base de datos: prestamos(id, id_usuario, id_libro, fecha_inicio, fecha_fin, estado).</p> </li> <li> <p>Flujo: Usuario \u2192 Sistema verifica disponibilidad \u2192 Confirma pr\u00e9stamo \u2192 Registra en BD.</p> </li> </ul> Enfoque pedag\u00f3gico <p>Realiza un taller guiado donde los estudiantes dise\u00f1en el diagrama de clases para un m\u00f3dulo. Usa Figma para dise\u00f1ar una pantalla de pr\u00e9stamo. Pide que elaboren un diccionario de datos para las entidades clave.</p> <p> Concejo</p> <ul> <li> <p>El dise\u00f1o preliminar Es como los planos generales de una casa: muestra habitaciones, distribuci\u00f3n y estructura. </p> </li> <li> <p>El dise\u00f1o detallado  Es como los planos el\u00e9ctricos, de fontaner\u00eda y acabados: especifica c\u00f3mo se construye cada parte. Ambos son esenciales para construir un sistema robusto, escalable y mantenible.</p> </li> </ul>"},{"location":"semana2/elementosdeldise%C3%B1odesoftware/","title":"Elementos del dise\u00f1o de software","text":""},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#elementos-del-diseno-de-software","title":"Elementos del Dise\u00f1o de Software","text":"<p>El dise\u00f1o de software es una fase cr\u00edtica del ciclo de vida del desarrollo de sistemas, en la que se traducen los requisitos del sistema (obtenidos en la fase de an\u00e1lisis) en una representaci\u00f3n estructurada y t\u00e9cnica que guiar\u00e1 la implementaci\u00f3n. Este proceso no es arbitrario, sino que se basa en cinco elementos fundamentales:</p> <pre><code>\u201c\u00bfPor qu\u00e9 algunos sistemas se caen con muchos usuarios y otros no? Todo empieza en el dise\u00f1o.\u201d\n</code></pre>"},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#1-objetivos-del-diseno","title":"1. Objetivos del Dise\u00f1o","text":""},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#que-son","title":"\u00bfQu\u00e9 son?","text":"<p>Los objetivos son las metas o prop\u00f3sitos que se busca alcanzar con el dise\u00f1o del software. Definen qu\u00e9 se espera lograr desde el punto de vista funcional, t\u00e9cnico y de calidad.</p>"},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#tipos-de-objetivos","title":"Tipos de objetivos","text":"<ul> <li>Funcionales: Cumplir con las funcionalidades requeridas por el usuario (ej: registrar usuarios, generar reportes).</li> <li>No funcionales (atributos de calidad):<ul> <li>Rendimiento: El sistema debe responder en menos de 2 segundos.</li> <li>Seguridad: Protecci\u00f3n de datos sensibles.</li> <li>Usabilidad: Interfaz intuitiva.</li> <li>Escalabilidad: Capacidad de crecer con m\u00e1s usuarios.</li> <li>Mantenibilidad: F\u00e1cil de modificar y actualizar.</li> </ul> </li> </ul> <p>Enfoque pedag\u00f3gico : Planteamiento</p> <pre><code>    \"Si van a dise\u00f1ar un sistema de inscripciones acad\u00e9micas, \u00bfcu\u00e1les ser\u00edan sus objetivos principales?\u201d\n</code></pre>"},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#2restricciones-del-diseno","title":"2.Restricciones del Dise\u00f1o","text":""},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#que-son_1","title":"\u00bfQu\u00e9 son?","text":"<p>Son limitaciones externas o internas que el dise\u00f1o debe respetar. No se pueden ignorar ni modificar f\u00e1cilmente.</p>"},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#tipos-de-restricciones","title":"Tipos de restricciones:","text":"Ejemplo pr\u00e1ctico <p>\u201cEl sistema debe desarrollarse en .NET por decisi\u00f3n corporativa, aunque el equipo conoce m\u00e1s de Python.\u201d</p> <p>Esto ilustra c\u00f3mo una restricci\u00f3n tecnol\u00f3gica influye en el dise\u00f1o. </p> Actividad sugerida <p>identificar al menos 3 restricciones en el caso de uso de tu proyecto integrador</p>"},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#tecnologicas","title":"Tecnol\u00f3gicas","text":"<p>Uso obligatorio de ciertas herramientas (ej: Java, PostgreSQL, AWS).</p>"},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#presupuestales","title":"Presupuestales","text":"<p>L\u00edmite de gasto en infraestructura o licencias.</p>"},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#temporales","title":"Temporales","text":"<p>Plazos de entrega ajustados.</p>"},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#legales-o-normativas","title":"Legales o normativas","text":"<p>Cumplimiento de normas como GDPR (protecci\u00f3n de datos) o est\u00e1ndares ISO.</p>"},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#recursos-humanos","title":"Recursos humanos","text":"<p>Equipo con experiencia limitada en ciertas tecnolog\u00edas.</p>"},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#3-alternativas-de-diseno","title":"3. Alternativas de Dise\u00f1o","text":""},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#que-son_2","title":"\u00bfQu\u00e9 son?","text":"<p>Son diferentes opciones o enfoques que se pueden tomar para resolver un mismo problema de dise\u00f1o. Elegir entre ellas implica an\u00e1lisis de trade-offs (costos/beneficios).</p> Ejemplos de alternativas Aspecto Alternativa A Alternativa B Arquitectura Monol\u00edtica Microservicios Base de datos SQL (PostgreSQL) NoSQL (MongoDB) Frontend React Angular Despliegue Servidor local Nube (AWS)"},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#proceso-de-seleccion","title":"Proceso de selecci\u00f3n:","text":"<p>Se eval\u00faan alternativas seg\u00fan:</p> <ul> <li>Alineaci\u00f3n con los objetivos.</li> <li>Viabilidad bajo las restricciones.</li> <li>Impacto en calidad (rendimiento, mantenibilidad, etc.).</li> </ul> En clase <p>Realiza una lluvia de ideas grupal para generar alternativas de dise\u00f1o sobre un sistema sencillo. Luego, haz una tabla comparativa y voten la mejor opci\u00f3n.</p>"},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#4-representaciones-del-diseno","title":"4. Representaciones del Dise\u00f1o","text":""},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#que-son_3","title":"\u00bfQu\u00e9 son?","text":"<p>Son las formas visuales o simb\u00f3licas en que se expresa el dise\u00f1o para que sea comprensible por desarrolladores, arquitectos y stakeholders.</p>"},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#tipos-de-representaciones","title":"Tipos de representaciones","text":""},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#graficas","title":"Gr\u00e1ficas","text":"<ul> <li>Diagramas UML (clases, secuencia, componentes).</li> <li>Diagrama de arquitectura (vistas l\u00f3gica, de despliegue).</li> <li>Diagrama de flujo de datos.</li> </ul>"},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#tabulares","title":"Tabulares","text":"<ul> <li>Tablas de mapeo de entidades.</li> <li>Matrices de trazabilidad requisitos-dise\u00f1o.</li> <li>Textuales:</li> <li>Especificaciones t\u00e9cnicas.</li> <li>Pseudoc\u00f3digo.</li> </ul>"},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#hibridas","title":"H\u00edbridas","text":"<ul> <li>Documentos que combinan texto, tablas y diagramas.</li> </ul> <p>Importancia Una buena representaci\u00f3n permite:</p> <ul> <li>Comunicar el dise\u00f1o de forma clara.</li> <li>Detectar errores tempranos.</li> <li>Facilitar la revisi\u00f3n t\u00e9cnica.</li> </ul> Actividad en clase <p>Usa Lucidchart o Draw.io para que los estudiantes dibujen un diagrama de clases o de arquitectura basado en un caso de uso.</p>"},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#5-soluciones-de-diseno","title":"5. Soluciones de Dise\u00f1o","text":""},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#que-son_4","title":"\u00bfQu\u00e9 son?","text":"<p>Es la propuesta concreta y final que integra los objetivos, restricciones, alternativas evaluadas y representaciones elegidas. Es el resultado del proceso de dise\u00f1o.</p>"},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#caracteristicas-de-una-buena-solucion","title":"Caracter\u00edsticas de una buena soluci\u00f3n:","text":"<ul> <li>Coherente con los requisitos del sistema.</li> <li>T\u00e9cnicamente viable.</li> <li>Documentada y comunicable.</li> <li>Flexible para futuros cambios.</li> </ul> Ejemplo de soluci\u00f3n <p>\u201cPara el sistema de gesti\u00f3n de biblioteca, se propone una arquitectura en capas (presentaci\u00f3n, l\u00f3gica de negocio, datos), usando Spring Boot (Java), base de datos MySQL y despliegue en AWS. Se modelar\u00e1 con diagramas UML y se documentar\u00e1 en un informe t\u00e9cnico.\u201d </p>"},{"location":"semana2/elementosdeldise%C3%B1odesoftware/#resumen","title":"Resumen","text":"Elemento Pregunta clave Ejemplo Objetivos \u00bfQu\u00e9 queremos lograr? Sistema r\u00e1pido, seguro y f\u00e1cil de usar Restricciones \u00bfQu\u00e9 nos limita? Debe usarse PostgreSQL y entregar en 3 meses Alternativas \u00bfQu\u00e9 opciones tenemos? Arquitectura monol\u00edtica vs. microservicios Representaciones \u00bfC\u00f3mo lo mostramos? Diagrama de clases, pseudoc\u00f3digo, tablas Soluciones \u00bfQu\u00e9 vamos a implementar? Arquitectura en capas con Spring Boot y MySQL Enfoque docente <p>Gu\u00edar a los estudiantes para que, al final de la semana, elaboren una peque\u00f1a propuesta de soluci\u00f3n de dise\u00f1o para su proyecto grupal, integrando los cinco elementos.</p> Proposito del Dise\u00f1o <p>El dise\u00f1o no es solo dibujar diagramas; es tomar decisiones t\u00e9cnicas con base en objetivos, limitaciones y alternativas.\u201d </p>"},{"location":"semana2/transiciondelanalisisaldise%C3%B1o/","title":"Transici\u00f3n del Analisis al Dise\u00f1o","text":""},{"location":"semana2/transiciondelanalisisaldise%C3%B1o/#transicion-del-analisis-al-diseno","title":"Transici\u00f3n del An\u00e1lisis al Dise\u00f1o","text":"<p>Esta es una parte clave de la Semana 2, y debes enfatizarla como puente entre lo que el sistema debe hacer (an\u00e1lisis) y c\u00f3mo lo har\u00e1 (dise\u00f1o).</p>"},{"location":"semana2/transiciondelanalisisaldise%C3%B1o/#proceso-de-transicion","title":"Proceso de transici\u00f3n","text":"<ol> <li> <p>Partir de los resultados del an\u00e1lisis</p> <ul> <li>Casos de uso.</li> <li>Diagramas de contexto.</li> <li>Especificaciones de requisitos.</li> </ul> </li> <li> <p>Interpretarlos para el dise\u00f1o</p> <ul> <li>Cada caso de uso se convierte en un m\u00f3dulo o funcionalidad.</li> <li>Los actores se relacionan con interfaces.</li> <li>Los flujos de datos gu\u00edan el dise\u00f1o de procesos.</li> </ul> </li> <li> <p>Evoluci\u00f3n del dise\u00f1o</p> <ul> <li>Preliminar: qu\u00e9 m\u00f3dulos existen y c\u00f3mo se comunican.</li> <li>Detallado: c\u00f3mo funciona cada m\u00f3dulo por dentro.</li> </ul> </li> </ol> Ejemplo en clase <p>Caso de uso: \"<code>Registrar usuario</code>\" Se convierte en: </p> <ul> <li>M\u00f3dulo \"Usuarios\" (dise\u00f1o preliminar).</li> <li>Clase <code>Usuario</code>, tabla <code>usuarios</code>, interfaz de registro, validaci\u00f3n de correo (dise\u00f1o detallado).</li> </ul>"}]}